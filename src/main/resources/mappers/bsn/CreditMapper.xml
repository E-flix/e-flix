<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eflix.bsn.mapper.CreditMapper">

  <!-- CreditMapper.xml -->
  <select id="selectCreditInfo"
          parameterType="string"
          resultType="com.eflix.bsn.dto.CreditInfoDTO">
    SELECT
        cm.CUSTOMER_CD                     AS customerCd,
        cm.CREDIT_LIMIT                    AS creditLimit,
        cm.CREDIT_USED                     AS creditUsed,
        (cm.CREDIT_LIMIT - cm.CREDIT_USED) AS remainingCredit,
        cm.CREDIT_STATUS                   AS creditStatus,
        cm.CREDIT_HOLD_FLG                 AS creditHoldFlg,
        cm.CREDIT_HOLD_REASON              AS creditHoldReason,
        cm.TRADE_STOP_FLG                  AS tradeStopFlg
    FROM   CREDIT_MANAGEMENT cm
    WHERE  cm.CUSTOMER_CD = #{customerCd}
  </select>



  <select id="getCreditInfo" resultType="com.eflix.bsn.dto.CreditInfoDTO">
    SELECT
      CREDIT_LIMIT       AS creditLimit,
      CREDIT_USED        AS creditUsed,
      CREDIT_STATUS      AS creditStatus,
      CREDIT_HOLD_FLG    AS creditHoldFlg,
      CREDIT_HOLD_REASON AS creditHoldReason,
      CREDIT_HOLD_UNTIL  AS nextPaymentDate
    FROM CREDIT_MANAGEMENT
    WHERE CUSTOMER_CD = #{customerCd}
  </select>

  <select id="getAvailableCredit" resultType="java.math.BigDecimal">
    SELECT GET_AVAILABLE_CREDIT(#{customerCd}) FROM DUAL
  </select>

  <select id="selectByCustomerCd"
        parameterType="string"
        resultType="com.eflix.bsn.dto.CreditInfoDTO">

    SELECT
        CUSTOMER_CD               AS customerCd,
        CREDIT_LIMIT              AS creditLimit,
        CREDIT_USED               AS creditUsed,
        (CREDIT_LIMIT - CREDIT_USED)     AS remainingCredit   <!--★ 추가 -->
      , PAYMENT_TERMS             AS paymentTerms
      , OVERDUE_AMOUNT            AS overdueAmount
      , CREDIT_STATUS             AS creditStatus
      , CREDIT_HOLD_FLG           AS creditHoldFlg
      , CREDIT_HOLD_REASON        AS creditHoldReason
      , CREDIT_HOLD_UNTIL         AS creditHoldUntil
      , CREDIT_RATING             AS creditRating
      , GUARANTEE_AMOUNT          AS guaranteeAmount
      , LOCK_ORDER_THRESHOLD      AS lockOrderThreshold
      , EFFECTIVE_FROM            AS effectiveFrom
      , EFFECTIVE_TO              AS effectiveTo
      , GRACE_PERIOD              AS gracePeriod
      , LAST_SETTLE_DT            AS lastSettleDt
      , TRADE_STOP_FLG            AS tradeStopFlg            <!-- 화면에서 쓰면 함께 조회 -->
    FROM CREDIT_MANAGEMENT
    WHERE CUSTOMER_CD = #{customerCd}
  </select>

  <!-- [신규] 여신 정보 저장 -->
  <insert id="insertCreditInfo" parameterType="com.eflix.bsn.dto.CreditInfoDTO">
    INSERT INTO CREDIT_MANAGEMENT (
        CUSTOMER_CD, CREDIT_LIMIT, CREDIT_USED, PAYMENT_TERMS, OVERDUE_AMOUNT,
        CREDIT_STATUS, CREDIT_HOLD_FLG, TRADE_STOP_FLG, CO_IDX,
        EFFECTIVE_FROM, EFFECTIVE_TO
    ) VALUES (
        #{customerCd}, #{creditLimit, jdbcType=NUMERIC}, #{creditUsed, jdbcType=NUMERIC}, #{paymentTerms}, 0,
        #{creditStatus}, #{creditHoldFlg, jdbcType=CHAR}, #{tradeStopFlg, jdbcType=CHAR}, #{coIdx},
        SYSDATE, TO_DATE('9999-12-31', 'YYYY-MM-DD')
    )
  </insert>
  
  <!-- [신규] 여신 정보 수정 -->
  <update id="updateCreditInfo" parameterType="com.eflix.bsn.dto.CreditInfoDTO">
    MERGE INTO CREDIT_MANAGEMENT cr
    USING (SELECT #{customerCd} AS CUSTOMER_CD, #{coIdx} AS CO_IDX FROM DUAL) src
    ON (cr.CUSTOMER_CD = src.CUSTOMER_CD AND cr.CO_IDX = src.CO_IDX)
    WHEN MATCHED THEN
        UPDATE SET
            CREDIT_LIMIT = #{creditLimit, jdbcType=NUMERIC},
            PAYMENT_TERMS = #{paymentTerms},
            CREDIT_STATUS = #{creditStatus},
            CREDIT_HOLD_FLG = #{creditHoldFlg, jdbcType=CHAR},
            TRADE_STOP_FLG = #{tradeStopFlg, jdbcType=CHAR},
            UPDATED_AT = SYSTIMESTAMP
    WHEN NOT MATCHED THEN
        INSERT (
            CUSTOMER_CD, CREDIT_LIMIT, CREDIT_USED, PAYMENT_TERMS, OVERDUE_AMOUNT,
            CREDIT_STATUS, CREDIT_HOLD_FLG, TRADE_STOP_FLG, CO_IDX,
            EFFECTIVE_FROM, EFFECTIVE_TO, CREATED_AT, UPDATED_AT
        ) VALUES (
            #{customerCd}, #{creditLimit, jdbcType=NUMERIC}, 0, #{paymentTerms}, 0,
            #{creditStatus}, #{creditHoldFlg, jdbcType=CHAR}, #{tradeStopFlg, jdbcType=CHAR}, #{coIdx},
            SYSDATE, TO_DATE('9999-12-31', 'YYYY-MM-DD'), SYSTIMESTAMP, SYSTIMESTAMP
        )
  </update>
</mapper>