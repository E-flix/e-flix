<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eflix.bsn.mapper.SOutboundMapper">

  <!-- ★★★ 수정된 출고 목록 조회 - 누락된 필드들 추가 ★★★ -->
  <select id="selectAllOutbound" resultType="com.eflix.bsn.dto.SalesOutboundDTO" parameterType="string">
    SELECT
        so.OUTBOUND_NO,
        so.WRITE_DT,
        so.CUSTOMER_CD,
        so.CUSTOMER_NAME,
        so.REPRESENTATIVE_NM,        
        so.ORDER_DT,                 
        so.OUTBOUND_DT,
        -- ★ 추가: 납기일자 (컬럼이 있으면 사용, 없으면 OUTBOUND_DT 사용)
        COALESCE(so.DELIVERY_DUE_DATE, so.OUTBOUND_DT) AS deliveryDueDate,
        so.MONEY,
        so.REMARKS,
        so.CO_IDX,
        -- 전체 상태 계산 로직
        CASE
            -- 모든 품목이 출고완료 상태이면 '출고완료'
            WHEN status_summary.total_count = status_summary.completed_count THEN '출고완료'
            -- 그 외 (하나라도 대기 상태가 있으면) '대기'
            ELSE '대기'
        END AS overallStatus
    FROM 
        EFLIX.SALES_OUTBOUND so
    LEFT JOIN (
        SELECT 
            OUTBOUND_NO,
            COUNT(*) AS total_count,
            SUM(CASE WHEN OUTBOUND_STATUS = '출고완료' THEN 1 ELSE 0 END) AS completed_count
        FROM EFLIX.SOUTBOUND_DETAIL
        GROUP BY OUTBOUND_NO
    ) status_summary ON so.OUTBOUND_NO = status_summary.OUTBOUND_NO
    WHERE 
        so.CO_IDX = #{coIdx}
    ORDER BY 
        so.OUTBOUND_DT DESC, so.CREATED_AT DESC
  </select>

  <!-- 출고 상세 조회 -->
  <select id="selectOutboundDetails" resultType="com.eflix.bsn.dto.SoutboundDetailDTO" parameterType="string">
    SELECT
      sd.OUTBOUND_NO        AS outboundNo,
      sd.LINE_NO            AS lineNo,
      sd.ITEM_CODE          AS itemCode,
      sd.ITEM_NAME          AS itemName,
      sd.STANDARD           AS standard,
      sd.QTY                AS qty,
      sd.UNIT               AS unit,
      sd.OUTBOUND_STATUS    AS outboundStatus,
      sd.REMARKS            AS remarks,
      sd.CO_IDX             AS coIdx
    FROM EFLIX.SOUTBOUND_DETAIL sd
    WHERE sd.OUTBOUND_NO = #{outboundNo}
    ORDER BY sd.LINE_NO
  </select>

  <!-- 출고번호 자동 생성 (회사별, 일자별 채번) -->
  <select id="selectNextOutboundNo" resultType="string" parameterType="string">
    SELECT 'OUT-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
           LPAD(NVL(MAX(TO_NUMBER(SUBSTR(OUTBOUND_NO, -4))), 0) + 1, 4, '0') AS nextNo
    FROM EFLIX.SALES_OUTBOUND
    WHERE CO_IDX = #{coIdx}
      AND OUTBOUND_NO LIKE 'OUT-' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'
  </select>

  <!-- 출고 헤더 INSERT -->
  <insert id="insertOutbound" parameterType="com.eflix.bsn.dto.SalesOutboundDTO">
    INSERT INTO EFLIX.SALES_OUTBOUND (
      OUTBOUND_NO, WRITE_DT, CUSTOMER_CD, CUSTOMER_NAME, REPRESENTATIVE_NM,
      ORDER_DT, OUTBOUND_DT, DELIVERY_DUE_DATE, MONEY, REMARKS, CO_IDX
    ) VALUES (
      #{outboundNo}, #{writeDt}, #{customerCd}, #{customerName}, #{representativeNm},
      #{orderDt}, #{outboundDt}, #{deliveryDueDate}, #{money, jdbcType=VARCHAR}, #{remarks, jdbcType=VARCHAR}, #{coIdx}
    )
  </insert>

  <!-- 출고 상세 일괄 INSERT -->
  <insert id="insertOutboundDetailBatch" parameterType="java.util.List">
    INSERT ALL
    <foreach collection="list" item="d">
      INTO EFLIX.SOUTBOUND_DETAIL (
        OUTBOUND_NO, LINE_NO, ITEM_CODE, ITEM_NAME, STANDARD,
        QTY, UNIT, OUTBOUND_STATUS, REMARKS, CO_IDX
      ) VALUES (
        #{d.outboundNo}, #{d.lineNo}, #{d.itemCode}, #{d.itemName}, #{d.standard},
        #{d.qty}, #{d.unit}, #{d.outboundStatus}, #{d.remarks}, #{d.coIdx}
      )
    </foreach>
    SELECT 1 FROM DUAL
  </insert>
  
  <!-- 출고 헤더 UPDATE -->
  <update id="updateOutbound" parameterType="com.eflix.bsn.dto.SalesOutboundDTO">
    UPDATE EFLIX.SALES_OUTBOUND
    SET WRITE_DT = #{writeDt},
        CUSTOMER_CD = #{customerCd},
        CUSTOMER_NAME = #{customerName},
        REPRESENTATIVE_NM = #{representativeNm},
        ORDER_DT = #{orderDt},
        OUTBOUND_DT = #{outboundDt},
        DELIVERY_DUE_DATE = #{deliveryDueDate},
        MONEY = #{money},
        REMARKS = #{remarks}
    WHERE OUTBOUND_NO = #{outboundNo}
      AND CO_IDX = #{coIdx}
  </update>

  <!-- 출고 상세 UPDATE (상태 변경 등) -->
  <update id="updateOutboundDetail" parameterType="com.eflix.bsn.dto.SoutboundDetailDTO">
    UPDATE EFLIX.SOUTBOUND_DETAIL
    SET ITEM_CODE = #{itemCode},
        ITEM_NAME = #{itemName},
        STANDARD = #{standard},
        QTY = #{qty},
        UNIT = #{unit},
        OUTBOUND_STATUS = #{outboundStatus},
        REMARKS = #{remarks}
    WHERE OUTBOUND_NO = #{outboundNo}
      AND LINE_NO = #{lineNo}
      AND CO_IDX = #{coIdx}
  </update>

  <!-- 출고 삭제 (ON DELETE CASCADE로 상세도 자동 삭제됨) -->
  <delete id="deleteOutbound">
    DELETE FROM EFLIX.SALES_OUTBOUND
    WHERE OUTBOUND_NO = #{outboundNo}
      AND CO_IDX = #{coIdx}
  </delete>

  <!-- 주문서 기반 출고 생성: 주문서 헤더 정보 조회 -->
  <select id="selectOrderForOutbound" resultType="com.eflix.bsn.dto.SalesOutboundDTO">
    SELECT 
      o.CUSTOMER_CD         AS customerCd,
      c.CUSTOMER_NM         AS customerName,
      c.REPRESENTATIVE_NM   AS representativeNm,
      o.ORDER_DT            AS orderDt,
      o.REMARKS             AS remarks,
      o.CO_IDX              AS coIdx
    FROM EFLIX.ORDERS o
    JOIN EFLIX.CUSTOMERS c ON c.CUSTOMER_CD = o.CUSTOMER_CD AND c.CO_IDX = o.CO_IDX
    WHERE o.ORDER_NO = #{orderNo}
      AND o.CO_IDX = #{coIdx}
  </select>

  <!-- 주문서 기반 출고 생성: 주문서 상세 정보 조회 -->
  <select id="selectOrderDetailsForOutbound" resultType="com.eflix.bsn.dto.SoutboundDetailDTO">
    SELECT
      od.LINE_NO            AS lineNo,
      od.ITEM_CODE          AS itemCode,
      od.ITEM_NAME          AS itemName,
      od.SPEC               AS standard,
      od.QTY                AS qty,
      'EA'                  AS unit,
      '대기'                AS outboundStatus,
      od.REMARKS            AS remarks,
      od.CO_IDX             AS coIdx
    FROM EFLIX.ORDERS_DETAIL od
    WHERE od.ORDER_NO = #{orderNo}
      AND od.CO_IDX = #{coIdx}
    ORDER BY od.LINE_NO
  </select>

  <!-- 출고 상태 통계 조회 -->
  <select id="selectOutboundStatusStats" resultType="java.util.HashMap" parameterType="string">
    SELECT 
      OUTBOUND_STATUS as status,
      COUNT(*) as count
    FROM EFLIX.SOUTBOUND_DETAIL
    WHERE CO_IDX = #{coIdx}
      AND OUTBOUND_STATUS IS NOT NULL
    GROUP BY OUTBOUND_STATUS
    ORDER BY 
      CASE OUTBOUND_STATUS
        WHEN '대기' THEN 1
        WHEN '출고완료' THEN 2
        ELSE 3
      END
  </select>

</mapper>