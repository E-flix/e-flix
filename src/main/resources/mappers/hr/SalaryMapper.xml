<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- ============================================
  - 작성자   : 김어진
  - 최초작성 : 2025-06-20
  - 설명     : SalaryMapper query xml
  [ 변경 이력 ]
  - 2025-06-19 (김어진): 계정과목 전체조회 작성
=============================================== -->
<mapper namespace="com.eflix.hr.mapper.SalaryMapper">
 <!-- <select id="searchSalary"
          parameterType="map"
          resultMap="SalaryMap">
    SELECT
      s.salary_idx,
      e.emp_idx,
      e.emp_name,
      d.dept_name,
      g.grd_name,
      s.salary_month,
      s.pay_month,
      s.base_salary,
      NVL(aw.allowance_sum, 0) AS allowance_sum,
      NVL(dw.deduction_sum, 0) AS deduction_sum,
      (s.base_salary + NVL(aw.allowance_sum, 0) - NVL(dw.deduction_sum, 0)) AS net_salary,
      s.salary_type
    FROM salary s
    INNER JOIN employees e ON s.emp_idx = e.emp_idx
    LEFT JOIN grade g ON e.grd_idx = g.grd_idx
    LEFT JOIN departments d ON e.dept_idx = d.dept_idx
    LEFT JOIN (
        SELECT co_idx,
              SUM(CASE WHEN type = 'SM01' AND use_status = 'Y' THEN NVL(al_amount, 0) ELSE 0 END) AS allowance_sum
        FROM salary_mapping
        WHERE use_status = 'Y'
        GROUP BY co_idx
    ) aw ON s.co_idx = aw.co_idx
    LEFT JOIN (
        SELECT co_idx,
              SUM(CASE WHEN type = 'SM02' AND use_status = 'Y' THEN NVL(al_amount, 0) ELSE 0 END) AS deduction_sum
        FROM salary_mapping
        WHERE use_status = 'Y'
        GROUP BY co_idx
    ) dw ON s.co_idx = dw.co_idx
    WHERE s.co_idx = #{coIdx}
        <if test="salaryMonth != null and salaryMonth != ''">
          AND s.salary_month = #{salaryMonth}
        </if>
        <if test="payMonth != null and payMonth != ''">
          AND s.pay_month   = #{payMonth}
        </if>
        <if test="empName != null and empName != ''">
          AND e.emp_name LIKE '%' || #{empName} || '%'
        </if>
        <if test="deptIdx != null and deptIdx != ''">
          AND d.dept_idx = #{deptIdx}
        </if>
    ORDER BY d.dept_name, g.grd_order, e.emp_name
    </select> -->
  
  <insert id="insert" parameterType="SalaryDTO">
    <selectKey resultType="String" keyProperty="salaryIdx" order="BEFORE">
        SELECT 'sal-' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(salary_idx, 5))), 100) + 1) FROM salary
    </selectKey>
    INSERT INTO salary(salary_idx, emp_idx, base_salary)
    VALUES (#{salaryIdx}, #{empIdx}, #{baseSalary})
  </insert>

    <!-- 요약 결과 매핑 -->
  <resultMap id="salarySummaryMap" type="SalarySummaryDTO">
    <id     property="salaryIdx"    column="salary_idx"/>
    <result property="empIdx"        column="emp_idx"/>
    <result property="empName"       column="emp_name"/>
    <result property="deptName"      column="dept_name"/>
    <result property="grdName"       column="grd_name"/>
    <result property="attMonth"   column="att_month"/>
    <result property="payMonth"      column="pay_month"/>
    <result property="baseSalary"    column="base_salary"/>
    <result property="allowanceSum"  column="allowance_sum"/>
    <result property="deductionSum"  column="deduction_sum"/>
    <result property="netSalary"     column="net_salary"/>
    <result property="status"        column="salary_type"/>
  </resultMap>

  <!-- 리스트 조회 / 동적 검색 지원 -->
  <select id="findSalaryList" resultMap="salarySummaryMap" parameterType="map">
    SELECT
      s.salary_idx,
      e.emp_idx,
      e.emp_name,
      d.dept_name,
      g.grd_name,
      s.att_month,
      s.pay_month,
      s.base_salary,
      NVL(aw.allowance_sum, 0) AS allowance_sum,
      NVL(dw.deduction_sum, 0) AS deduction_sum,
      (s.base_salary + NVL(aw.allowance_sum, 0) - NVL(dw.deduction_sum, 0) - NVL(s.tax, 0)) AS net_salary,
      s.salary_type
    FROM salary s
    INNER JOIN employees e ON s.emp_idx = e.emp_idx
    LEFT JOIN grade g ON e.grd_idx = g.grd_idx
    LEFT JOIN departments d ON e.dept_idx = d.dept_idx
    LEFT JOIN (
        SELECT co_idx,
              SUM(CASE WHEN type = 'SM01' AND use_status = 'Y' THEN NVL(al_amount, 0) ELSE 0 END) AS allowance_sum
        FROM salary_mapping
        WHERE use_status = 'Y'
        GROUP BY co_idx
    ) aw ON s.co_idx = aw.co_idx
    LEFT JOIN (
        SELECT co_idx,
              SUM(CASE WHEN type = 'SM02' AND use_status = 'Y' THEN NVL(al_amount, 0) ELSE 0 END) AS deduction_sum
        FROM salary_mapping
        WHERE use_status = 'Y'
        GROUP BY co_idx
    ) dw ON s.co_idx = dw.co_idx
    WHERE s.co_idx = #{coIdx}
        <if test="attMonth != null and attMonth != ''">
          AND s.att_month = #{attMonth}
        </if>
        <if test="payMonth != null and payMonth != ''">
          AND s.pay_month   = #{payMonth}
        </if>
        <if test="empName != null and empName != ''">
          AND e.emp_name LIKE '%' || #{empName} || '%'
        </if>
        <if test="deptIdx != null and deptIdx != ''">
          AND d.dept_idx = #{deptIdx}
        </if>
    ORDER BY d.dept_name, g.grd_order, e.emp_name
  </select>

  <!-- 급여 상세항목 (salary + salary_mapping) -->
  <select id="selectSalaryDetail" parameterType="String" resultType="SalaryDetailDTO">
    SELECT
        '기본급'              AS itemName,
        s.base_salary         AS amount,
        '-'                   AS remark,
        'TM01'                AS taxType,
        'SM01'                AS payType
    FROM salary s
    WHERE s.salary_idx = #{salaryIdx} AND s.co_idx = #{coIdx}
    
    UNION ALL
    
    SELECT
        sm.al_name            AS itemName,
        CASE sm.type WHEN 'SM02' THEN -sm.al_amount ELSE sm.al_amount END AS amount,
        '-'                   AS remark,
        DECODE(sm.type, 'SM01', 'TM01', 'TM02') AS taxType,
        DECODE(sm.type, 'SM01', 'SM01', 'SM02') AS payType
    FROM salary_mapping sm
    JOIN salary s ON sm.co_idx = s.co_idx
    WHERE sm.use_status = 'Y'
        AND s.salary_idx = #{salaryIdx} AND s.co_idx = #{coIdx}

    UNION ALL

    SELECT
        '세금' AS itemName,
        -s.tax AS amount,
        '-' AS remark,
        'TM01'                AS taxType,
        'SM02'                AS payType
    FROM salary s
    WHERE s.salary_idx = #{salaryIdx} AND s.co_idx = #{coIdx}
  </select>

  <!-- 결과 매핑 - 급여 상세 항목 -->
  <!-- <resultMap id="salaryDetailMap" type="SalaryDetailDTO">
    <result property="item"            column="item"/>
    <result property="amount"          column="amount"/>
    <result property="remark"          column="remark"/>
    <result property="taxType"         column="tax_type"/>
    <result property="transactionType" column="transaction_type"/>
  </resultMap> -->

  <!-- 급여 상세 조회 -->
  <select id="findSalaryDetail" resultType="SalaryDetailDTO" parameterType="string">
    SELECT 
            s.*,
            e.emp_name,
            d.dept_name,
            g.grd_name
        FROM salary s
        INNER JOIN employees e ON s.emp_idx = e.emp_idx
        INNER JOIN departments d ON e.dept_idx = d.dept_idx
        INNER JOIN grade g ON e.grd_idx = g.grd_idx
        WHERE s.co_idx = #{coIdx}
        AND s.salary_idx = #{salaryIdx}
  </select>

    <!-- 급여 계산 실행 -->
    <update id="calculateSalary" parameterType="String">
        CALL PROC_FILL_SALARY_SAL(#{coIdx}, #{salaryIdx})
    </update>

    <!-- 급여 확정 -->
    <update id="confirmSalary" parameterType="map">
        UPDATE salary 
        SET salary_type = 'st-03'
        WHERE salary_idx IN 
          <foreach collection="salaryIdxList" item="salaryIdx" open="(" close=")" separator=",">
              #{salaryIdx}
          </foreach>
          AND co_idx = #{coIdx}
          AND salary_type = 'st-02'
    </update>
    
    <!-- 부서 목록 조회 -->
    <select id="getDepartmentList" parameterType="string" resultType="DeptDTO">
        SELECT dept_idx, dept_name
        FROM departments
        WHERE co_idx = #{coIdx}
        AND dept_status = 'Y'
        ORDER BY dept_name
    </select>

    <!-- 급여 항목별 합계 조회 -->
    <select id="getSalarySummary" parameterType="map" resultType="SalarySummaryDTO">
        SELECT 
            COUNT(*) as total_count,
            SUM(base_salary) as total_base_salary,
            SUM(COALESCE(bonus, 0) + COALESCE(overtime_pay, 0) + COALESCE(night_work_pay, 0) + 
                COALESCE(sal1, 0) + COALESCE(sal2, 0) + COALESCE(sal3, 0)) as total_allowance,
            SUM(COALESCE(tax, 0) + COALESCE(health_insurance, 0) + COALESCE(national_pension, 0) + 
                COALESCE(employment_ins, 0) + COALESCE(industrial_ins, 0) + COALESCE(other_deductions, 0)) as total_deduction,
            SUM(total_salary - 
                (COALESCE(tax, 0) + COALESCE(health_insurance, 0) + COALESCE(national_pension, 0) + 
                 COALESCE(employment_ins, 0) + COALESCE(industrial_ins, 0) + COALESCE(other_deductions, 0))) as total_net_salary
        FROM salary s
        INNER JOIN employees e ON s.emp_idx = e.emp_idx
        WHERE s.co_idx = #{coIdx}
        <if test="attMonth != null and attMonth != ''">
            AND s.att_month = #{attMonth}
        </if>
        <if test="payMonth != null and payMonth != ''">
            AND s.pay_month = #{payMonth}
        </if>
        <if test="empName != null and empName != ''">
            AND e.emp_name LIKE '%' || #{empName} || '%'
        </if>
        <if test="deptIdx != null and deptIdx != ''">
            AND e.dept_idx = #{deptIdx}
        </if>
    </select>

    <!-- 급여 항목 코드 생성용 시퀀스 조회 -->
    <select id="getNextMappingIdx" resultType="string">
        SELECT 'mp-' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(mp_idx, 4))), 0) + 1, 3, '0') as next_idx
        FROM salary_mapping
        WHERE mp_idx LIKE 'mp-%'
    </select>

    <!-- 급여 항목 코드 생성용 시퀀스 조회 -->
    <select id="getNextAlNumber" resultType="string">
        SELECT 'al-' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(al_number, 4))), 100) + 1, 3, '0') as next_al_number
        FROM salary_mapping
        WHERE al_number LIKE 'al-%'
    </select>

    <!-- 0713 -->
    <select id="findAllCountBySearch" parameterType="SalarySearchDTO" resultType="int">
        SELECT COUNT(*)
        FROM employees e
            LEFT JOIN salary s ON s.emp_idx = e.emp_idx
                AND s.co_idx = #{coIdx}
                AND SUBSTR(s.att_month,1,7) = #{attMonth}
            LEFT JOIN departments d ON e.dept_idx = d.dept_idx
            LEFT JOIN grade g ON e.grd_idx = g.grd_idx
        <where>
            e.co_idx = #{coIdx}

            <if test="empIdx != null and empIdx != ''">
                AND e.emp_idx = #{empIdx}
            </if>

            <if test="empName != null and empName.trim() != ''">
                AND e.emp_name LIKE '%' || #{empName} || '%'
            </if>

            <if test="deptIdx != null and deptIdx != ''">
                AND d.dept_Idx = #{deptIdx}
            </if>
            
            <if test="grdIdx != null and grdIdx != ''">
                AND g.grd_idx = #{grdIdx}
            </if>
        </where>
        ORDER BY e.emp_idx
    </select>

    <select id="findAllBySearch" parameterType="SalarySearchDTO" resultType="SalaryListDTO">
        SELECT *
        FROM (
            SELECT a.*, ROWNUM AS rn
            FROM (
                SELECT
                    s.salary_idx,
                    e.emp_idx,
                    e.emp_name,
                    d.dept_name,
                    g.grd_name,
                    TO_CHAR(TO_DATE(s.att_month,'YYYY-MM-DD'),'YYYY.MM') AS att_month,
                    TO_CHAR(TO_DATE(s.pay_month,'YYYY-MM-DD'),'YYYY.MM') AS pay_month,
                    s.base_salary,
                    (
                        NVL(s.night_work_pay,0)
                        + NVL((
                            SELECT SUM(
                            CASE WHEN m.type='SM01'
                                    AND REGEXP_LIKE(m.al_amount,'^[0-9]+(\.[0-9]+)?$')
                                THEN TO_NUMBER(m.al_amount)
                                ELSE 0
                            END)
                            FROM salary_mapping m
                            WHERE m.co_idx     = s.co_idx
                            AND m.use_status = 'Y'
                            AND m.mp_idx IN (
                                s.sal1,s.sal2,s.sal3,s.sal4,s.sal5,
                                s.sal6,s.sal7,s.sal8,s.sal9,s.sal10
                            )
                        ),0)
                    ) AS allowance_total,

                    TRUNC(
                        NVL(s.tax,0)
                        + NVL(s.national_pension,0)
                        + NVL(s.health_insurance,0)
                        + NVL(s.employment_ins,0)
                        + NVL(s.industrial_ins,0)
                        + NVL(s.other_deductions,0)
                        + NVL((
                            SELECT SUM(
                            CASE WHEN m.type='SM02'
                                    AND REGEXP_LIKE(m.al_amount,'^[0-9]+(\.[0-9]+)?$')
                                THEN TO_NUMBER(m.al_amount)
                                ELSE 0
                            END)
                            FROM salary_mapping m
                            WHERE m.co_idx     = s.co_idx
                            AND m.use_status = 'Y'
                            AND m.mp_idx IN (
                                s.sal1,s.sal2,s.sal3,s.sal4,s.sal5,
                                s.sal6,s.sal7,s.sal8,s.sal9,s.sal10
                            )
                        ),0)
                    ) AS deduction_total,

                    TRUNC(s.total_salary) AS net_salary,

                    s.salary_type  AS calc_status

                FROM employees e
                    LEFT JOIN salary s ON s.emp_idx = e.emp_idx
                        AND s.co_idx = #{coIdx}
                        AND SUBSTR(s.att_month,1,7) = #{attMonth}
                    LEFT JOIN departments d ON e.dept_idx = d.dept_idx
                    LEFT JOIN grade g ON e.grd_idx = g.grd_idx
                <where>
                    e.co_idx = #{coIdx}

                    <if test="empIdx != null and empIdx != ''">
                        AND e.emp_idx = #{empIdx}
                    </if>

                    <if test="empName != null and empName != ''">
                        AND e.emp_name LIKE '%' || #{empName} || '%'
                    </if>

                    <if test="deptIdx != null and deptIdx != ''">
                        AND d.dept_Idx = #{deptIdx}
                    </if>
                    
                    <if test="grdIdx != null and grdIdx != ''">
                        AND g.grd_idx = #{grdIdx}
                    </if>
                </where>
                ORDER BY e.emp_idx
            ) a
            WHERE ROWNUM &lt;= #{offset} + #{limit}
        )
        WHERE rn &gt; #{offset}
    </select>

    <select id="calcSalary" parameterType="SalaryCalcDTO">
        CALL calc_salary(#{date}, #{coIdx})
    </select>

    <select id="calcSalaryByEmpIdx" parameterType="SalaryCalcDTO">
        CALL calc_salary_v2(#{empIdx}, #{date}, #{coIdx})
    </select>

    <select id="salaryEmpInfo" parameterType="String" resultType="SalaryEmpDTO">
        SELECT e.emp_img, e.emp_idx, e.emp_name,
            d.dept_idx, d.dept_name,
            g.grd_idx, g.grd_name,
            s.att_month, s.pay_month, s.salary_type
        FROM employees e
            LEFT JOIN departments d ON e.dept_idx = d.dept_idx
            LEFT JOIN grade g ON e.grd_idx = g.grd_idx
            LEFT JOIN salary s ON e.emp_idx = s.emp_idx
                AND s.salary_idx = #{salaryIdx}
        WHERE e.emp_idx = #{empIdx}
    </select>

    <select id="salaryDetailBySalaryIdxWithCoIdx" parameterType="String" resultType="SalaryDetailDTO">
        SELECT t.item_name, t.amount, t.remark, t.tax_type, t.pay_type
        FROM (
            SELECT
                '기본급' AS item_name,
                '+ '||TO_CHAR(s.base_salary, 'FM9G999G999') AS amount,
                '-' AS remark,
                'TM01' AS tax_type,
                'SM01' AS pay_type,
                1 AS grp_order,
                0 AS row_order
            FROM salary s
            WHERE s.salary_idx = #{salaryIdx}
                AND s.co_idx = #{coIdx}

            UNION ALL

            SELECT
                sm.al_name AS item_name,
                CASE sm.calc_type
                    WHEN 'CA1' THEN
                        (CASE sm.type WHEN 'SM01' THEN '+ ' ELSE '- ' END)
                        || TO_CHAR(TRUNC(TO_NUMBER(sm.al_amount)), 'FM9G999G999')
                    WHEN 'CA2' THEN
                        (CASE sm.type WHEN 'SM01' THEN '+ ' ELSE '- ' END)
                        || TO_CHAR(TRUNC(TO_NUMBER(sm.al_amount)), 'FM9G999G999') || '%'
                    ELSE
                        (CASE sm.type WHEN 'SM01' THEN '+ ' ELSE '- ' END)
                        || sm.al_amount
                END AS amount,
                CASE sm.calc_type
                    WHEN 'CA01' THEN '정액'
                    WHEN 'CA02' THEN '비율'
                    ELSE '수식'
                END                                                                         AS remark,
                sm.tax_type AS tax_type,
                CASE sm.type
                    WHEN 'SM01' THEN 'SM01'
                    ELSE 'SM02'
                END                                                                         AS pay_type,
                2                                                                           AS grp_order,
                CASE sm.type WHEN 'SM01' THEN 0 ELSE 1 END                                   AS row_order
            FROM salary_mapping sm
            WHERE sm.co_idx = #{coIdx}
                AND sm.use_status = 'Y'

            UNION ALL

            SELECT
                '야간수당' AS item_name,
                '+ '||TO_CHAR(s.night_work_pay, 'FM9G999G999') AS amount,
                '정액' AS remark,
                'TM01' AS tax_type,
                'SM01' AS pay_type,
                2 AS grp_order,
                2 AS row_order
            FROM salary s
            WHERE s.salary_idx = #{salaryIdx}
                AND s.co_idx = #{coIdx}

            UNION ALL

            SELECT
                '국민연금' AS item_name,
                '- '||TO_CHAR(s.national_pension, 'FM9G999G999') AS amount,
                '4.5%' AS remark,
                'TM02' AS tax_type,
                'SM02' AS pay_type,
                3 AS grp_order,
                0 AS row_order
            FROM salary s
            WHERE s.salary_idx = #{salaryIdx}
                AND s.co_idx = #{coIdx}

            UNION ALL
            SELECT
                '건강보험' AS item_name,
                '- '||TO_CHAR(s.health_insurance, 'FM9G999G999')  AS amount,
                '3.495%' AS remark,
                'TM02' AS tax_type,
                'SM02' AS pay_type,
                3 AS grp_order,
                1 AS row_order
            FROM salary s
            WHERE s.salary_idx = #{salaryIdx}
                AND s.co_idx = #{coIdx}

            UNION ALL
            SELECT
                '고용보험' AS item_name,
                '- '||TO_CHAR(s.employment_ins, 'FM9G999G999') AS amount,
                '1.0%' AS remark,
                'TM02' AS tax_type,
                'SM02' AS pay_type,
                3 AS grp_order,
                2 AS row_order
            FROM salary s
            WHERE s.salary_idx = #{salaryIdx}
                AND s.co_idx = #{coIdx}

            UNION ALL
            SELECT
                '소득세' AS item_name,
                '- '||TO_CHAR(s.tax, 'FM9G999G999') AS amount,
                '자동계산' AS remark,
                'TM02' AS tax_type,
                'SM02' AS pay_type,
                3 AS grp_order,
                3 AS row_order

            FROM salary s
            WHERE s.salary_idx = #{salaryIdx}
                AND s.co_idx = #{coIdx}

            UNION ALL

            SELECT
                '실수령액' AS item_name,
                '+ '||TO_CHAR(s.total_salary, 'FM9G999G999') AS amount,
                '자동계산' AS remark,
                '-' AS tax_type,
                '-' AS pay_type,
                4 AS grp_order,
                0  AS row_order
            FROM salary s
            WHERE s.salary_idx = #{salaryIdx}
                AND s.co_idx = #{coIdx}
            ) t
        ORDER BY t.grp_order, t.row_order
    </select>

    <update id="updateSalary" parameterType="SalaryDTO">
        UPDATE salary
        <set>
            <if test="salaryType != null and salaryType != ''">
                salary_type = #{salaryType}
            </if>
        </set>
        WHERE salary_idx = #{salaryIdx}
    </update>

    <select id="findSalaryIdxByEmpIdxAndDate" parameterType="String" resultType="String">
        SELECT salary_idx
        FROM salary
        WHERE emp_idx = #{empIdx} AND att_month = #{date} || '-10'
    </select>

    <select id="findCountByEmpIdx" parameterType="SalarySearchDTO" resultType="int">
        SELECT COUNT(*)
        FROM employees e
            LEFT JOIN salary s ON s.emp_idx = e.emp_idx
                AND s.co_idx = #{coIdx}
                AND SUBSTR(s.att_month,1,7) = #{attMonth}
            LEFT JOIN departments d ON e.dept_idx = d.dept_idx
            LEFT JOIN grade g ON e.grd_idx = g.grd_idx
        WHERE e.co_idx = #{coIdx}
            AND e.emp_idx = #{empIdx}
            AND s.salary_type = 'ST03'
        ORDER BY e.emp_idx
    </select>

    <select id="findByEmpIdx" parameterType="SalarySearchDTO" resultType="SalaryListDTO">
        SELECT *
        FROM (
            SELECT a.*, ROWNUM AS rn
            FROM (
                SELECT
                    s.salary_idx,
                    e.emp_idx,
                    e.emp_name,
                    d.dept_name,
                    g.grd_name,
                    TO_CHAR(TO_DATE(s.att_month,'YYYY-MM-DD'),'YYYY.MM') AS att_month,
                    TO_CHAR(TO_DATE(s.pay_month,'YYYY-MM-DD'),'YYYY.MM') AS pay_month,
                    s.base_salary,
                    (
                        NVL(s.night_work_pay,0)
                        + NVL((
                            SELECT SUM(
                            CASE WHEN m.type='SM01'
                                    AND REGEXP_LIKE(m.al_amount,'^[0-9]+(\.[0-9]+)?$')
                                THEN TO_NUMBER(m.al_amount)
                                ELSE 0
                            END)
                            FROM salary_mapping m
                            WHERE m.co_idx     = s.co_idx
                            AND m.use_status = 'Y'
                            AND m.mp_idx IN (
                                s.sal1,s.sal2,s.sal3,s.sal4,s.sal5,
                                s.sal6,s.sal7,s.sal8,s.sal9,s.sal10
                            )
                        ),0)
                    ) AS allowance_total,

                    TRUNC(
                        NVL(s.tax,0)
                        + NVL(s.national_pension,0)
                        + NVL(s.health_insurance,0)
                        + NVL(s.employment_ins,0)
                        + NVL(s.industrial_ins,0)
                        + NVL(s.other_deductions,0)
                        + NVL((
                            SELECT SUM(
                            CASE WHEN m.type='SM02'
                                    AND REGEXP_LIKE(m.al_amount,'^[0-9]+(\.[0-9]+)?$')
                                THEN TO_NUMBER(m.al_amount)
                                ELSE 0
                            END)
                            FROM salary_mapping m
                            WHERE m.co_idx     = s.co_idx
                            AND m.use_status = 'Y'
                            AND m.mp_idx IN (
                                s.sal1,s.sal2,s.sal3,s.sal4,s.sal5,
                                s.sal6,s.sal7,s.sal8,s.sal9,s.sal10
                            )
                        ),0)
                    ) AS deduction_total,

                    TRUNC(s.total_salary) AS net_salary,

                    s.salary_type  AS calc_status

                FROM employees e
                    LEFT JOIN salary s ON s.emp_idx = e.emp_idx
                        AND s.co_idx = #{coIdx}
                        AND SUBSTR(s.att_month,1,7) = #{attMonth}
                    LEFT JOIN departments d ON e.dept_idx = d.dept_idx
                    LEFT JOIN grade g ON e.grd_idx = g.grd_idx
                WHERE e.co_idx = #{coIdx}
                    AND e.emp_idx = #{empIdx}
                    AND s.salary_type = 'ST03'
                ORDER BY e.emp_idx
            ) a
            WHERE ROWNUM &lt;= #{offset} + #{limit}
        )
        WHERE rn &gt; #{offset}
    </select>
</mapper>

