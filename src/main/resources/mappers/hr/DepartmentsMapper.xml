<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- ============================================
- 작성자   : 김어진
- 최초작성 : 2025-06-20
- 설명     : DepartmentMapper query xml
[ 변경 이력 ]
- 2025-06-23 (김어진): 부서 상위부서,하위부서 쿼리문 작성
- 2025-06-26 (김어진): 부서등록 쿼리문 작성
=============================================== -->
<mapper namespace="com.eflix.hr.mapper.DepartmentMapper">
    <select id="findAllDepts" parameterType="String" resultType="DepartmentDTO">
        SELECT DISTINCT
            dept_idx   AS deptIdx,
            dept_name  AS deptName
        FROM departments
        WHERE co_idx = #{coIdx}
        ORDER BY dept_name
    </select>

    <select id="findAllDeptsUp" parameterType="String" resultType="DepartmentDTO">
        SELECT DISTINCT
            dept_idx   AS deptIdx,
            dept_name  AS deptName
        FROM departments
        WHERE dept_up_idx = #{deptIdx} AND co_idx = #{coIdx}
        ORDER BY dept_name
    </select>

    <!-- 부서 전체조회 -->
    <select id="selectAll" resultType="DepartmentDTO">
        SELECT d1.*, d2.dept_name AS dept_up_name
        FROM departments d1
        LEFT JOIN departments d2 ON d1.dept_up_idx = d2.dept_idx
        WHERE d1.co_idx = #{coIdx}
    </select>

    <!-- 부서등록 -->
    <insert id="insertDept" parameterType="DepartmentDTO">
        <selectKey resultType="String" keyProperty="deptIdx" order="BEFORE">
        SELECT 'dept-' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(dept_idx, 6))), 100) + 1) FROM departments
        </selectKey>
        INSERT INTO departments
        (dept_idx,
            dept_up_idx,
            dept_name,
            dept_status,
            dept_regdate,
            dept_tel,
            dept_memo,
            co_idx)
        VALUES
        (
            #{deptIdx},
            <choose>
            <when test="deptUpIdx != null and deptUpIdx != ''">
                #{deptUpIdx}
            </when> 
            <otherwise>
                NULL
            </otherwise>
            </choose>,
            #{deptName},
            #{deptStatus},
            SYSDATE,
            #{deptTel},
            #{deptMemo},
            #{coIdx}
        )
    </insert>

    <!-- 0707 -->
    <select id="findUpAllByCoIdx" parameterType="String" resultType="DepartmentDTO">
        SELECT
            dept_idx   AS deptIdx,
            dept_name  AS deptName
            FROM departments
            WHERE dept_up_idx IS NULL AND co_idx = #{coIdx}
        ORDER BY dept_name
    </select>
    <select id="findDownAllByCoIdx" parameterType="String" resultType="DepartmentDTO">
        SELECT
            d1.dept_idx   AS deptIdx,
            d1.dept_name  AS deptName,
            d2.dept_name AS dept_up_name
            FROM departments d1
            LEFT JOIN departments d2 ON d1.dept_up_idx = d2.dept_idx
            WHERE d1.co_idx = #{coIdx} AND d1.dept_up_idx = #{deptUpIdx}
        ORDER BY d1.dept_name
    </select>

    <!-- 0710 -->
    <select id="findByEmpIdx" parameterType="String" resultType="DepartmentDTO">
        SELECT d.dept_idx, d.dept_name
        FROM departments d
            JOIN employees e ON e.dept_idx = d.dept_idx
        WHERE e.emp_idx = #{empIdx}
    </select>

    <!-- 0714 -->
    <!-- 전체 부서 목록 + 사원 수 포함 -->
    <select id="findAllDepartmentWithEmpCountByCoIdx" parameterType="String" resultType="DepartmentDTO">
        WITH dept_hierarchy AS ( 
            SELECT d.dept_idx, d.dept_up_idx, d.dept_name
            FROM departments d
            START WITH d.dept_up_idx IS NULL
            CONNECT BY PRIOR d.dept_idx = d.dept_up_idx
        ),
        emp_counts AS (
            SELECT e.dept_idx, COUNT(*) AS emp_count
            FROM employees e
            GROUP BY e.dept_idx
        ),
        dept_with_emp AS (
            SELECT dh.dept_idx,
                dh.dept_up_idx,
                dh.dept_name,
                (
                    SELECT SUM(ec.emp_count)
                    FROM emp_counts ec
                        JOIN departments d2 ON ec.dept_idx = d2.dept_idx
                    WHERE d2.dept_idx IN (
                        SELECT d3.dept_idx
                        FROM departments d3
                        START WITH d3.dept_idx = dh.dept_idx
                        CONNECT BY PRIOR d3.dept_idx = d3.dept_up_idx
                    )
                ) AS total_emp_count
            FROM dept_hierarchy dh
        )
        SELECT 
            d.dept_idx,
            d.dept_up_idx,
            d.dept_name,
            d.dept_status,
            d.dept_tel,
            d.dept_memo,
            d.co_idx,
            NVL(dw.total_emp_count, 0) AS empCount
        FROM departments d
            LEFT JOIN dept_with_emp dw ON d.dept_idx = dw.dept_idx
        WHERE d.co_idx = #{coIdx}
        ORDER BY d.dept_up_idx NULLS FIRST, d.dept_idx
    </select>

    <!-- 부서 등록 -->
    <insert id="insert" parameterType="DepartmentDTO">
        <selectKey resultType="String" keyProperty="deptIdx" order="BEFORE">
            SELECT 'dept-' || TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(dept_idx, 6))), 100) + 1) FROM departments
        </selectKey>
        INSERT INTO departments (
            dept_idx, dept_up_idx, dept_name, dept_status,
            dept_memo, dept_tel, co_idx, dept_regdate
        ) VALUES (
            #{deptIdx}, #{deptUpIdx}, #{deptName}, #{deptStatus},
            #{deptMemo}, #{deptTel}, #{coIdx}, SYSDATE
        )
    </insert>

    <!-- 부서 수정 -->
    <update id="update" parameterType="DepartmentDTO">
        UPDATE departments
        SET dept_name = #{deptName},
            dept_up_idx = #{deptUpIdx},
            dept_status = #{deptStatus},
            dept_tel = #{deptTel},
            dept_memo = #{deptMemo},
            dept_moddate = SYSDATE
        WHERE dept_idx = #{deptIdx}
    </update>

    <!-- 부서 삭제 -->
    <delete id="deleteDepartments" parameterType="java.util.List">
        <foreach collection="list" item="deptIdx" separator=";">
            DELETE FROM departments WHERE dept_idx = #{deptIdx}
        </foreach>
    </delete>
</mapper>